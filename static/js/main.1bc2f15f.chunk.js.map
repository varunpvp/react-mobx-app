{"version":3,"sources":["components/post.tsx","stores/app-store-context.ts","stores/use-app-store.ts","pages/posts-page.tsx","pages/post-page.tsx","pages/user-page.tsx","models/comment.ts","stores/comment/comment-api.ts","stores/comment/comment-store.ts","models/post.ts","stores/post/post-api.ts","stores/post/post-store.ts","models/user.ts","stores/user/user-api.ts","stores/user/user-store.ts","App.tsx","stores/app-store.ts","reportWebVitals.ts","index.tsx"],"names":["Post","observer","post","title","body","substr","to","id","userId","user","name","AppStoreContext","React","createContext","useAppStore","useContext","PostsPage","store","useState","loading","setLoading","load","a","api","getAll","useEffect","all","map","PostPgae","params","useParams","postId","Number","getById","comment","getByPostId","byId","get","comments","email","UserPage","getByUserId","username","posts","Comment","this","makeObservable","computed","CommentApi","axios","res","data","CommentStore","forEach","it","set","Array","from","values","observable","ObservableMap","action","filter","PostApi","PostStore","User","UserApi","UserStore","users","appStore","create","baseURL","App","Provider","value","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1bc2f15f.chunk.js","sourcesContent":["import { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PostModel from \"../models/post\";\n\nconst Post: React.FC<{ post: PostModel }> = observer(({ post }) => {\n  return (\n    <div>\n      <h2>{post.title}</h2>\n      <p>\n        {post.body.substr(0, 100)}...\n        <Link to={`/post/${post.id}`}>read more</Link>\n      </p>\n      <p>\n        Written by <Link to={`/user/${post.userId}`}>{post.user?.name}</Link>\n      </p>\n    </div>\n  );\n});\n\nexport default Post;\n","import React from \"react\";\nimport AppStore from \"./app-store\";\n\nconst AppStoreContext = React.createContext<null | AppStore>(null);\n\nexport default AppStoreContext;\n","import { useContext } from \"react\";\nimport AppStore from \"./app-store\";\nimport AppStoreContext from \"./app-store-context\";\n\nconst useAppStore = () => {\n  const appStore = useContext(AppStoreContext);\n  return appStore as AppStore;\n};\n\nexport default useAppStore;\n","import { observer } from \"mobx-react\";\nimport { useEffect, useState } from \"react\";\nimport Post from \"../components/post\";\nimport useAppStore from \"../stores/use-app-store\";\n\nconst PostsPage = observer(() => {\n  const store = useAppStore();\n  const [loading, setLoading] = useState(false);\n\n  const load = async () => {\n    try {\n      setLoading(true);\n      await store.post.api.getAll();\n      await store.user.api.getAll();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    load();\n    // eslint-disable-next-line\n  }, []);\n\n  if (loading) {\n    return <div>loading...</div>;\n  }\n\n  return (\n    <div>\n      <h1>Posts</h1>\n\n      {store.post.all.map((post) => (\n        <Post key={post.id} post={post} />\n      ))}\n    </div>\n  );\n});\n\nexport default PostsPage;\n","import { observer } from \"mobx-react\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport Post from \"../components/post\";\nimport useAppStore from \"../stores/use-app-store\";\n\nconst PostPgae = observer(() => {\n  const [loading, setLoading] = useState(false);\n\n  const store = useAppStore();\n\n  const params = useParams<{ postId: string }>();\n\n  const postId = Number(params.postId);\n\n  const load = async () => {\n    try {\n      setLoading(true);\n\n      await store.post.api.getById(postId);\n      await store.comment.api.getByPostId(postId);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    load();\n    // eslint-disable-next-line\n  }, []);\n\n  if (loading) {\n    return <div>loading...</div>;\n  }\n\n  const post = store.post.byId.get(Number(params.postId));\n\n  if (!post) {\n    return <div>Post not found</div>;\n  }\n\n  return (\n    <div>\n      <Post post={post} />\n\n      <h2>Comments </h2>\n\n      {post.comments.map((comment) => {\n        return (\n          <div key={comment.id}>\n            <strong>\n              {comment.name} â€¢ {comment.email}\n            </strong>\n            <p>{comment.body}</p>\n            <br />\n          </div>\n        );\n      })}\n    </div>\n  );\n});\n\nexport default PostPgae;\n","import { observer } from \"mobx-react\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport Post from \"../components/post\";\nimport useAppStore from \"../stores/use-app-store\";\n\nconst UserPage = observer(() => {\n  const [loading, setLoading] = useState(false);\n\n  const params = useParams<{ userId: string }>();\n\n  const userId = Number(params.userId);\n\n  const store = useAppStore();\n\n  const load = async () => {\n    try {\n      setLoading(true);\n      await store.user.api.getById(userId);\n      await store.post.api.getByUserId(userId);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    load();\n    // eslint-disable-next-line\n  }, []);\n\n  if (loading) {\n    return <div>loading...</div>;\n  }\n\n  const user = store.user.byId.get(userId);\n\n  if (!user) {\n    return <div>User not found</div>;\n  }\n\n  return (\n    <div>\n      <h3>\n        {user.name} â€¢ {user.username}\n      </h3>\n      <p>{user.email}</p>\n\n      <h2>Posts</h2>\n\n      {user.posts?.map((post) => (\n        <Post key={post.id} post={post} />\n      ))}\n    </div>\n  );\n});\n\nexport default UserPage;\n","import { computed, makeObservable } from \"mobx\";\nimport AppStore from \"../stores/app-store\";\nimport IComment from \"../types/comment\";\n\nexport default class Comment implements IComment {\n  id: number;\n  postId: number;\n  name: string;\n  email: string;\n  body: string;\n\n  constructor(private store: AppStore, comment: IComment) {\n    this.id = comment.id;\n    this.postId = comment.postId;\n    this.name = comment.name;\n    this.email = comment.email;\n    this.body = comment.body;\n\n    makeObservable(this);\n  }\n\n  @computed get post() {\n    return this.store.post.byId.get(this.postId);\n  }\n}\n","import AppStore from \"../app-store\";\n\nexport default class CommentApi {\n  constructor(private store: AppStore) {}\n\n  async getByPostId(postId: number) {\n    const res = await this.store.axios.get(`/posts/${postId}/comments`);\n    this.store.comment.load(res.data);\n  }\n}\n","import {\n  action,\n  computed,\n  makeObservable,\n  observable,\n  ObservableMap,\n} from \"mobx\";\nimport IComment from \"../../types/comment\";\nimport Comment from \"../../models/comment\";\n\nimport AppStore from \"../app-store\";\nimport CommentApi from \"./comment-api\";\n\nexport default class CommentStore {\n  api: CommentApi;\n\n  @observable byId = new ObservableMap<number, Comment>();\n\n  constructor(private store: AppStore) {\n    this.api = new CommentApi(store);\n\n    makeObservable(this);\n  }\n\n  @action load(comments: IComment[]) {\n    comments.forEach((it) => this.byId.set(it.id, new Comment(this.store, it)));\n  }\n\n  @computed get all() {\n    return Array.from(this.byId.values());\n  }\n}\n","import { computed, makeObservable } from \"mobx\";\nimport AppStore from \"../stores/app-store\";\nimport IPost from \"../types/post\";\n\nexport default class Post implements IPost {\n  id: number;\n  userId: number;\n  title: string;\n  body: string;\n\n  constructor(private store: AppStore, post: IPost) {\n    this.id = post.id;\n    this.userId = post.userId;\n    this.title = post.title;\n    this.body = post.body;\n\n    makeObservable(this);\n  }\n\n  @computed get user() {\n    return this.store.user.byId.get(this.userId);\n  }\n\n  @computed get comments() {\n    return this.store.comment.all.filter((it) => it.postId === this.id);\n  }\n}\n","import AppStore from \"../app-store\";\n\nexport default class PostApi {\n  constructor(private store: AppStore) {}\n\n  async getAll() {\n    const res = await this.store.axios.get(`/posts`);\n    this.store.post.load(res.data);\n  }\n\n  async getById(id: number) {\n    const res = await this.store.axios.get(`/posts/${id}`);\n    this.store.post.load([res.data]);\n  }\n\n  async getByUserId(userId: number) {\n    const res = await this.store.axios.get(`/posts?userId=${userId}`);\n    this.store.post.load(res.data);\n  }\n}\n","import {\n  action,\n  computed,\n  makeObservable,\n  observable,\n  ObservableMap,\n} from \"mobx\";\nimport Post from \"../../models/post\";\nimport IPost from \"../../types/post\";\nimport AppStore from \"../app-store\";\nimport PostApi from \"./post-api\";\n\nexport default class PostStore {\n  api: PostApi;\n\n  @observable byId = new ObservableMap<number, Post>();\n\n  constructor(private store: AppStore) {\n    this.api = new PostApi(store);\n\n    makeObservable(this);\n  }\n\n  @action load(posts: IPost[]) {\n    posts.forEach((it) => this.byId.set(it.id, new Post(this.store, it)));\n  }\n\n  @computed get all() {\n    return Array.from(this.byId.values());\n  }\n}\n","import { computed, makeObservable } from \"mobx\";\nimport AppStore from \"../stores/app-store\";\nimport IUser from \"../types/user\";\n\nexport default class User implements IUser {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n\n  constructor(private store: AppStore, user: IUser) {\n    this.id = user.id;\n    this.name = user.name;\n    this.username = user.username;\n    this.email = user.email;\n\n    makeObservable(this);\n  }\n\n  @computed get posts() {\n    return this.store.post.all.filter((it) => it.userId === this.id);\n  }\n}\n","import AppStore from \"../app-store\";\n\nexport default class UserApi {\n  constructor(private store: AppStore) {}\n\n  async getAll() {\n    const res = await this.store.axios.get(`/users`);\n    this.store.user.load(res.data);\n  }\n\n  async getById(id: number) {\n    const res = await this.store.axios.get(`/users/${id}`);\n    this.store.user.load([res.data]);\n  }\n}\n","import {\n  action,\n  computed,\n  makeObservable,\n  observable,\n  ObservableMap,\n} from \"mobx\";\nimport User from \"../../models/user\";\nimport IUser from \"../../types/user\";\nimport AppStore from \"../app-store\";\nimport UserApi from \"./user-api\";\n\nexport default class UserStore {\n  api: UserApi;\n\n  @observable byId = new ObservableMap<number, User>();\n\n  constructor(private store: AppStore) {\n    this.api = new UserApi(store);\n\n    makeObservable(this);\n  }\n\n  @action load(users: IUser[]) {\n    users.forEach((it) => this.byId.set(it.id, new User(this.store, it)));\n  }\n\n  @computed get all() {\n    return Array.from(this.byId.values());\n  }\n}\n","import { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport PostsPage from \"./pages/posts-page\";\nimport PostPgae from \"./pages/post-page\";\nimport UserPage from \"./pages/user-page\";\n\nimport AppStore from \"./stores/app-store\";\nimport AppStoreContext from \"./stores/app-store-context\";\n\nconst appStore = new AppStore();\n\nfunction App() {\n  return (\n    <AppStoreContext.Provider value={appStore}>\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/user/:userId\" component={UserPage} />\n          <Route path=\"/post/:postId\" component={PostPgae} />\n          <Route path=\"/\" component={PostsPage} />\n        </Switch>\n      </BrowserRouter>\n    </AppStoreContext.Provider>\n  );\n}\n\nexport default App;\n","import CommentStore from \"./comment/comment-store\";\nimport PostStore from \"./post/post-store\";\nimport UserStore from \"./user/user-store\";\nimport axios from \"axios\";\n\nexport default class AppStore {\n  axios = axios.create({ baseURL: \"https://jsonplaceholder.typicode.com\" });\n\n  user = new UserStore(this);\n  post = new PostStore(this);\n  comment = new CommentStore(this);\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}