{"version":3,"sources":["app-context.ts","models/comment.ts","stores/comment.ts","models/post.ts","stores/post.ts","models/user.ts","stores/user.ts","apis/comment.ts","apis/post.ts","apis/user.ts","components/post.tsx","pages/home.tsx","pages/post.tsx","pages/user.tsx","app.tsx","stores/app.ts","apis/app.ts","reportWebVitals.ts","index.tsx"],"names":["AppContext","React","createContext","useAppContext","useContext","Comment","store","comment","id","postId","name","email","body","this","makeObservable","post","byId","get","computed","CommentStore","observable","map","comments","forEach","it","set","Array","from","values","action","Post","userId","title","user","all","filter","PostStore","posts","User","username","UserStore","users","CommentApi","api","a","client","res","load","data","PostApi","UserApi","observer","ellipsisBody","substr","to","HomePage","useState","loading","setLoading","getAll","useEffect","PostPage","params","useParams","Number","getById","getByPostId","UserPage","getByUserId","axios","create","baseURL","App","Provider","value","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7e8e4e6a.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\nimport AppApi from \"./apis/app\";\nimport AppStore from \"./stores/app\";\n\ninterface AppContextType {\n  store: AppStore;\n  api: AppApi;\n}\n\nconst AppContext = React.createContext<null | AppContextType>(null);\n\nexport const useAppContext = () => {\n  const context = useContext(AppContext);\n  return context as AppContextType;\n};\n\nexport default AppContext;\n","import { computed, makeObservable } from \"mobx\";\nimport AppStore from \"../stores/app\";\nimport IComment from \"../types/comment\";\n\nexport default class Comment implements IComment {\n  id: number;\n  postId: number;\n  name: string;\n  email: string;\n  body: string;\n\n  constructor(private store: AppStore, comment: IComment) {\n    this.id = comment.id;\n    this.postId = comment.postId;\n    this.name = comment.name;\n    this.email = comment.email;\n    this.body = comment.body;\n\n    makeObservable(this);\n  }\n\n  @computed get post() {\n    return this.store.post.byId.get(this.postId);\n  }\n}\n","import { action, computed, makeObservable, observable } from \"mobx\";\nimport IComment from \"../types/comment\";\nimport Comment from \"../models/comment\";\nimport AppStore from \"./app\";\n\nexport default class CommentStore {\n  byId = observable.map<number, Comment>();\n\n  constructor(private store: AppStore) {\n    makeObservable(this);\n  }\n\n  @action load(comments: IComment[]) {\n    comments.forEach((it) => this.byId.set(it.id, new Comment(this.store, it)));\n  }\n\n  @computed get all() {\n    return Array.from(this.byId.values());\n  }\n}\n","import { computed, makeObservable } from \"mobx\";\nimport AppStore from \"../stores/app\";\nimport IPost from \"../types/post\";\n\nexport default class Post implements IPost {\n  id: number;\n  userId: number;\n  title: string;\n  body: string;\n\n  constructor(private store: AppStore, post: IPost) {\n    this.id = post.id;\n    this.userId = post.userId;\n    this.title = post.title;\n    this.body = post.body;\n\n    makeObservable(this);\n  }\n\n  @computed get user() {\n    return this.store.user.byId.get(this.userId);\n  }\n\n  @computed get comments() {\n    return this.store.comment.all.filter((it) => it.postId === this.id);\n  }\n}\n","import { action, computed, makeObservable, observable } from \"mobx\";\nimport Post from \"../models/post\";\nimport IPost from \"../types/post\";\nimport AppStore from \"./app\";\n\nexport default class PostStore {\n  byId = observable.map<number, Post>();\n\n  constructor(private store: AppStore) {\n    makeObservable(this);\n  }\n\n  @action load(posts: IPost[]) {\n    posts.forEach((it) => this.byId.set(it.id, new Post(this.store, it)));\n  }\n\n  @computed get all() {\n    return Array.from(this.byId.values());\n  }\n}\n","import { computed, makeObservable } from \"mobx\";\nimport AppStore from \"../stores/app\";\nimport IUser from \"../types/user\";\n\nexport default class User implements IUser {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n\n  constructor(private store: AppStore, user: IUser) {\n    this.id = user.id;\n    this.name = user.name;\n    this.username = user.username;\n    this.email = user.email;\n\n    makeObservable(this);\n  }\n\n  @computed get posts() {\n    return this.store.post.all.filter((it) => it.userId === this.id);\n  }\n}\n","import { action, computed, makeObservable, observable } from \"mobx\";\nimport User from \"../models/user\";\nimport IUser from \"../types/user\";\nimport AppStore from \"./app\";\n\nexport default class UserStore {\n  byId = observable.map<number, User>();\n\n  constructor(private store: AppStore) {\n    makeObservable(this);\n  }\n\n  @action load(users: IUser[]) {\n    users.forEach((it) => this.byId.set(it.id, new User(this.store, it)));\n  }\n\n  @computed get all() {\n    return Array.from(this.byId.values());\n  }\n}\n","import AppStore from \"../stores/app\";\nimport AppApi from \"./app\";\n\nexport default class CommentApi {\n  constructor(private api: AppApi, private store: AppStore) {}\n\n  async getByPostId(postId: number) {\n    const res = await this.api.client.get(`/posts/${postId}/comments`);\n    this.store.comment.load(res.data);\n  }\n}\n","import AppStore from \"../stores/app\";\nimport AppApi from \"./app\";\n\nexport default class PostApi {\n  constructor(private api: AppApi, private store: AppStore) {}\n\n  async getAll() {\n    const res = await this.api.client.get(`/posts`);\n    this.store.post.load(res.data);\n  }\n\n  async getById(id: number) {\n    const res = await this.api.client.get(`/posts/${id}`);\n    this.store.post.load([res.data]);\n  }\n\n  async getByUserId(userId: number) {\n    const res = await this.api.client.get(`/posts?userId=${userId}`);\n    this.store.post.load(res.data);\n  }\n}\n","import AppStore from \"../stores/app\";\nimport AppApi from \"./app\";\n\nexport default class UserApi {\n  constructor(private api: AppApi, private store: AppStore) {}\n\n  async getAll() {\n    const res = await this.api.client.get(`/users`);\n    this.store.user.load(res.data);\n  }\n\n  async getById(id: number) {\n    const res = await this.api.client.get(`/users/${id}`);\n    this.store.user.load([res.data]);\n  }\n}\n","import { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PostModel from \"../models/post\";\n\nconst Post: React.FC<{ post: PostModel; ellipsisBody?: boolean }> = observer(\n  ({ post, ellipsisBody = true }) => {\n    return (\n      <div>\n        <h2>{post.title}</h2>\n        <p>\n          {ellipsisBody ? post.body.substr(0, 100) : post.body}\n          {ellipsisBody && (\n            <span>\n              ...<Link to={`/post/${post.id}`}>read more</Link>\n            </span>\n          )}\n        </p>\n        <p>\n          Written by <Link to={`/user/${post.userId}`}>{post.user?.name}</Link>\n        </p>\n      </div>\n    );\n  }\n);\n\nexport default Post;\n","import { observer } from \"mobx-react\";\nimport { useEffect, useState } from \"react\";\nimport { useAppContext } from \"../app-context\";\nimport Post from \"../components/post\";\n\nconst HomePage = observer(() => {\n  const { api, store } = useAppContext();\n  const [loading, setLoading] = useState(false);\n\n  const load = async () => {\n    try {\n      setLoading(true);\n      await api.post.getAll();\n      await api.user.getAll();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    load();\n    // eslint-disable-next-line\n  }, []);\n\n  if (loading) {\n    return <div>loading...</div>;\n  }\n\n  return (\n    <div>\n      <h1>Posts</h1>\n\n      {store.post.all.map((post) => (\n        <Post key={post.id} post={post} />\n      ))}\n    </div>\n  );\n});\n\nexport default HomePage;\n","import { observer } from \"mobx-react\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { useAppContext } from \"../app-context\";\nimport Post from \"../components/post\";\n\nconst PostPage = observer(() => {\n  const { api, store } = useAppContext();\n  const [loading, setLoading] = useState(false);\n\n  const params = useParams<{ postId: string }>();\n\n  const postId = Number(params.postId);\n\n  const load = async () => {\n    try {\n      setLoading(true);\n      await api.post.getById(postId);\n      await api.comment.getByPostId(postId);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    load();\n    // eslint-disable-next-line\n  }, []);\n\n  if (loading) {\n    return <div>loading...</div>;\n  }\n\n  const post = store.post.byId.get(Number(params.postId));\n\n  if (!post) {\n    return <div>Post not found</div>;\n  }\n\n  return (\n    <div>\n      <Post ellipsisBody={false} post={post} />\n\n      <h2>Comments </h2>\n\n      {post.comments.map((comment) => {\n        return (\n          <div key={comment.id}>\n            <strong>\n              {comment.name} • {comment.email}\n            </strong>\n            <p>{comment.body}</p>\n            <br />\n          </div>\n        );\n      })}\n    </div>\n  );\n});\n\nexport default PostPage;\n","import { observer } from \"mobx-react\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { useAppContext } from \"../app-context\";\nimport Post from \"../components/post\";\n\nconst UserPage = observer(() => {\n  const [loading, setLoading] = useState(false);\n\n  const params = useParams<{ userId: string }>();\n\n  const userId = Number(params.userId);\n\n  const { api, store } = useAppContext();\n\n  const load = async () => {\n    try {\n      setLoading(true);\n      await api.user.getById(userId);\n      await api.post.getByUserId(userId);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    load();\n    // eslint-disable-next-line\n  }, []);\n\n  if (loading) {\n    return <div>loading...</div>;\n  }\n\n  const user = store.user.byId.get(userId);\n\n  if (!user) {\n    return <div>User not found</div>;\n  }\n\n  return (\n    <div>\n      <h3>\n        {user.name} • {user.username}\n      </h3>\n      <p>{user.email}</p>\n\n      <h2>Posts</h2>\n\n      {user.posts.map((post) => (\n        <Post key={post.id} post={post} />\n      ))}\n    </div>\n  );\n});\n\nexport default UserPage;\n","import { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport AppContext from \"./app-context\";\nimport AppStore from \"./stores/app\";\nimport AppApi from \"./apis/app\";\nimport HomePage from \"./pages/home\";\nimport PostPage from \"./pages/post\";\nimport UserPage from \"./pages/user\";\n\nconst store = new AppStore();\nconst api = new AppApi(store);\n\nfunction App() {\n  return (\n    <AppContext.Provider value={{ store, api }}>\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/user/:userId\" component={UserPage} />\n          <Route path=\"/post/:postId\" component={PostPage} />\n          <Route path=\"/\" component={HomePage} />\n        </Switch>\n      </BrowserRouter>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","import CommentStore from \"./comment\";\nimport PostStore from \"./post\";\nimport UserStore from \"./user\";\n\nexport default class AppStore {\n  user = new UserStore(this);\n  post = new PostStore(this);\n  comment = new CommentStore(this);\n}\n","import axios from \"axios\";\nimport AppStore from \"../stores/app\";\nimport CommentApi from \"./comment\";\nimport PostApi from \"./post\";\nimport UserApi from \"./user\";\n\nexport default class AppApi {\n  client = axios.create({ baseURL: \"https://jsonplaceholder.typicode.com\" });\n\n  user: UserApi;\n  post: PostApi;\n  comment: CommentApi;\n\n  constructor(store: AppStore) {\n    this.user = new UserApi(this, store);\n    this.post = new PostApi(this, store);\n    this.comment = new CommentApi(this, store);\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from \"react-dom\";\nimport App from \"./app\";\nimport \"./index.css\";\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}